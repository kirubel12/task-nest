// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false) @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  sessions      Session[]
  accounts      Account[]
  comments      Comment[]

  displayUsername String?

  twoFactorEnabled Boolean     @default(false) @map("two_factor_enabled")
  twofactors       TwoFactor[]

  // Project relations
  ownedProjects    Project[]       @relation("ProjectOwner")
  projectMemberships ProjectMember[]
  assignedTasks    Task[]
  sentInvitations  Invitation[] @relation("SentInvitations")

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  username              String?   @map("username")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?  // optional project description
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  invitation  Invitation[]
  
  
  // relationships
  tasks       Task[]
  members     ProjectMember[]

  // meta
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectMember {
  id         String   @id @default(cuid())
  role       ProjectRole @default(MEMBER)
  userId     String
  projectId  String
  
  user       User     @relation(fields: [userId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
  
  createdAt  DateTime @default(now())

  @@unique([userId, projectId]) // prevent duplicate memberships
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  comments    Comment[]
  
  projectId   String
  assigneeId  String?
  
  project     Project @relation(fields: [projectId], references: [id])
  assignee    User?   @relation(fields: [assigneeId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Comment {
  id         String   @id @default(cuid())
  content    String

  // Relations
  taskId     String
  authorId   String

  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Meta
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Invitation {
  id          String       @id @default(cuid())
  email       String
  token       String       @unique
  status      InviteStatus @default(PENDING)

  // Relations
  projectId   String
  inviterId   String

  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviter     User         @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)

  // Meta
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  acceptedAt  DateTime?

  @@index([email])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}


// Supporting enums
enum ProjectRole {
  OWNER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
